Practice_01:

#include <iostream>
using namespace std;

struct node{
    int data;
    node* next;
};

class stack{
public:
    node* head = new node;
    stack(){
        head = NULL;
    }
    void push(int data){
        node* new_node = new node;
        new_node->data = data;
        new_node->next = head;
        head = new_node;
    }
    void display(){
        node* curr = head;
        while (curr != NULL)
        {
            cout << curr->data << endl;
            curr = curr->next;
        }
        cout << "--------------\n";
    }
};

int main()
{
    stack s1;
    s1.push(5);
    s1.push(7);
    s1.push(9);
    s1.push(2);
    s1.display();
    cout << "Everything is fine!" << endl;
    return 0;
} 



Practice_02 : 


#include <iostream>
using namespace std;

struct node{
    int data;
    node* next;
};

class stack{
public:
    node* head = new node;
    stack(){
        head = NULL;
    }
    void push(int data){
        node* new_node = new node;
        new_node->data = data;
        new_node->next = head;
        head = new_node;
    }
    void pop(){
        node* temp = head;
        head = temp->next;
        temp->next = NULL;
        delete temp;
    }
    void display(){
        node* curr = head;
        while (curr != NULL)
        {
            cout << curr->data << endl;
            curr = curr->next;
        }
        cout << "--------------\n";
    }
};

int main()
{
    stack s1;
    s1.push(5);
    s1.push(7);
    s1.push(9);
    s1.push(2);
    s1.display();
    s1.pop();
    s1.display();
    cout << "Everything is fine!" << endl;
    return 0;
} 



Stack With Array:


#include <iostream>
using namespace std;

class stack{
public:
    int arr[10];
    int top = -1;
    void push(int data){
        if (top>=9)
        {
            cout << "Stack is full!\n";
        }
        else{
            top++;
            arr[top] = data;
        }
    }
    void pop(){
        if (top == -1)
        {
            cout << "Stack is empty!\n";
        }
        else{
            top--;
        }
    }
    void display(){
        for (int i = top; i >= 0; i--)
        {
            cout << arr[i] << endl;
        }
        cout << "---------------\n";
    }
    void peek(){
        if (top == -1)
        {
            cout << "Stack is empty!\n";
        }
        else{
            cout << "Peek value : " << arr[top] << endl;
            cout << "---------------\n";
        }
    }
    bool isEmpty(){
        if(top == -1){
            return true;
        }
        else
        {
            return false;
        }
    }
    bool isFull(){
        if(top>=9){
            return true;
        }
        else
        {
            return false;
        }
    }
};

int main()
{
    stack s;
    cout << "Is Stack empty: "<<(s.isEmpty()?"yes":"no") << endl;
    s.push(56);
    s.push(21);
    s.push(3);
    s.push(43);
    s.push(2);
    s.push(1);
    s.push(7);
    s.push(90);
    s.pop();
    s.push(44);
    s.push(99);
    s.push(18);
    s.display();
    cout << "Is Stack full: "<<(s.isFull()?"yes":"no") << endl;
    cout << "Is Stack empty: "<<(s.isEmpty()?"yes":"no") << endl;
    cout << "Everything is fine!" << endl;
    return 0;
}



Stack With Linked list:



#include <iostream>
using namespace std;

struct node{
    int data;
    node* next;
};

class stack{
public:
    node* head = new node;
    stack(){
        head = NULL;
    }
    void push(int data){
        node* new_node = new node;
        new_node->data = data;
        new_node->next = head;
        head = new_node;
    }
    void pop(){
        node* temp = head;
        head = temp->next;
        temp->next = NULL;
        delete temp;
    }
    void display(){
        node* curr = head;
        while (curr != NULL)
        {
            cout << curr->data << endl;
            curr = curr->next;
        }
        cout << "--------------\n";
    }
    void peek(){
        cout << head->data << endl;
    }
    bool isEmpty(){
        if(head == NULL){
            return true;
        }
        else
        {
            return false;
        }
        
    }
};

int main()
{
    stack s1;
    cout << "Is Stack Empty: " << (s1.isEmpty()?"yes":"no") << endl;
    s1.push(9);
    s1.push(50);
    s1.pop();
    s1.push(12);
    s1.pop();
    s1.push(77);
    s1.push(0);
    s1.push(3);
    s1.pop();
    s1.pop();
    s1.display();
    s1.peek();


    cout << "Everything is fine!" << endl;
    return 0;
}